@page
@model POS.Pages.CartModel
@{
    ViewData["Title"] = "Your Cart";
}

<style>
    .wait-cursor {
        cursor: wait !important;
    }
    
    .wait-cursor * {
        cursor: wait !important;
    }
    
    #checkoutOverlay {
        cursor: wait !important;
    }
</style>

@* Execute any immediate fix script from TempData *@
@if (TempData["FixOverlayScript"] != null)
{
    <script>
        @Html.Raw(TempData["FixOverlayScript"])
    </script>
}

<div class="container mt-4">
    <h2>Your Shopping Cart</h2>
    
    <div id="cart-loading" class="text-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading your cart...</p>
    </div>
    
    <div id="cart-empty" class="text-center my-5 d-none">
        <div class="alert alert-info">
            <i class="bi bi-cart" style="font-size: 3rem;"></i>
            <p class="mt-3">Your cart is empty.</p>
            <a href="/User" class="btn btn-primary mt-2">Continue Shopping</a>
        </div>
    </div>
    
    <div id="cart-content" class="d-none">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Cart Items</h4>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Total</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="cart-items">
                            <!-- Cart items will be loaded here dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer">
                <div class="d-flex justify-content-between align-items-center">
                    <a href="/User" class="btn btn-secondary">Continue Shopping</a>
                    <div>
                        <button id="clear-cart" class="btn btn-outline-danger me-2">Clear Cart</button>
                        <button id="checkout" class="btn btn-success">Checkout</button>
                    </div>
                </div>
                <div class="text-end mt-3">
                    <p class="fw-bold">Total: <span id="cart-total">$0.00</span></p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Quantity Update Modal -->
<div class="modal fade" id="quantityModal" tabindex="-1" aria-labelledby="quantityModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="quantityModalLabel">Update Quantity</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="update-cart-item-id">
                <div class="mb-3">
                    <label for="product-name" class="form-label">Product</label>
                    <input type="text" class="form-control" id="product-name" readonly>
                </div>
                <div class="mb-3">
                    <label for="quantity" class="form-label">Quantity</label>
                    <input type="number" class="form-control" id="quantity" min="1" value="1">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="update-quantity">Update</button>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="confirmation-message">
                Are you sure you want to remove this item from your cart?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirm-action">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- Checkout Loading Overlay -->
<div id="checkoutOverlay" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.8); z-index:9999; backdrop-filter: blur(5px);">
    <div style="position:absolute; top:50%; left:50%; transform:translate(-50%, -50%); text-align:center; color:white; background-color: rgba(0,0,0,0.7); padding: 20px; border-radius: 10px; box-shadow: 0 0 15px rgba(255,255,255,0.2);">
        <div class="spinner-border text-light mb-3" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Processing checkout...</span>
        </div>
        <h4>Processing your order</h4>
        <p>Please wait while we complete your checkout...</p>
        <p class="small">Do not close this window or navigate away</p>
    </div>
</div>

<!-- Confirmation Modal for Checkout -->
<div class="modal fade" id="checkoutConfirmationModal" tabindex="-1" aria-labelledby="checkoutConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="checkoutConfirmationModalLabel">Confirm Checkout</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to proceed with checkout?</p>
                <p class="small">This will submit your order for processing.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="confirmCheckoutBtn">Proceed</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let cartItems = [];
        let currentAction = '';
        let currentItemId = 0;
        
        // Function to prevent navigation during checkout
        function preventNavigation(event) {
            event.preventDefault();
            // Chrome requires returnValue to be set
            event.returnValue = '';
            return '';
        }
        
        // Function to enable navigation block
        function enableNavigationBlock() {
            // Create an impenetrable overlay
            const overlay = document.getElementById('checkoutOverlay');
            if (overlay) {
                overlay.style.display = 'block';
                
                // Add event listeners to capture and prevent all interactions
                overlay.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }, true);
                
                overlay.addEventListener('mousedown', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }, true);
                
                overlay.addEventListener('keydown', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }, true);
            }
            
            // Disable browser navigation
            window.addEventListener('beforeunload', preventNavigation);
            
            // Store as global reference so we can remove it later
            window.preventNavigation = preventNavigation;
            
            // Disable all interactive elements on the page
            const interactiveElements = document.querySelectorAll('button, a, input, select, textarea, [role="button"]');
            interactiveElements.forEach(element => {
                element.setAttribute('disabled', 'disabled');
                element.classList.add('disabled');
                element.setAttribute('aria-disabled', 'true');
                element.tabIndex = -1;
                
                // Save original click handler and replace with no-op
                if (element.onclick) {
                    element._originalOnClick = element.onclick;
                    element.onclick = function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        return false;
                    };
                }
                
                // Prevent clicks
                element.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }, true);
            });
            
            // Add global event capture to prevent any interaction
            document.body.classList.add('wait-cursor');
            document.body.style.pointerEvents = 'none';
            
            // Store navigation state in session storage to persist across page loads
            sessionStorage.setItem('checkoutInProgress', 'true');
            sessionStorage.setItem('interfaceLocked', 'true');
        }
        
        // Function to allow deliberate navigation to payment page
        function allowPaymentNavigation() {
            // Remove the beforeunload event listener to prevent "Changes you made may not be saved" message
            window.removeEventListener('beforeunload', preventNavigation);
            window.removeEventListener('beforeunload', window.preventNavigation);
            
            // Keep the overlay visible but allow the navigation
            sessionStorage.setItem('deliberateNavigation', 'true');
        }
        
        $(document).ready(function() {
            // First check if we're coming from a cancelled checkout
            @if (TempData["CancelledCheckout"] != null && (string)TempData["CancelledCheckout"] == "true")
            {
                <text>
                console.log('Checkout was cancelled - cleaning up UI state');
                
                // Immediately hide overlay before anything else
                const overlay = document.getElementById('checkoutOverlay');
                if (overlay) {
                    overlay.style.display = 'none';
                    overlay.style.visibility = 'hidden';
                    overlay.style.opacity = '0';
                    overlay.remove(); // More aggressive approach
                }
                
                // Then reset the rest of the checkout state
                resetCheckoutState();
                
                // Show notification about cancelled checkout
                showNotification('Checkout was cancelled. Your items are still in your cart.', 'info');
                </text>
            }
            
            // Check if checkout was in progress but was interrupted
            if (sessionStorage.getItem('checkoutInProgress') === 'true') {
                console.log('Interrupted checkout detected - cleaning up');
                // Clear the flag
                sessionStorage.removeItem('checkoutInProgress');
                
                // Reset UI
                resetCheckoutState();
            }
            
            // Load cart items
            loadCart();
            
            // Setup event handlers
            $('#clear-cart').click(function() {
                currentAction = 'clear';
                $('#confirmation-message').text('Are you sure you want to clear your entire cart?');
                new bootstrap.Modal(document.getElementById('confirmationModal')).show();
            });
            
            // Show confirmation dialog when checkout button is clicked
            $('#checkout').click(function() {
                // Validate cart has items
                if (cartItems.length === 0) {
                    showNotification('Your cart is empty. Add items before checking out.', 'warning');
                    return;
                }
                
                // Show checkout confirmation dialog
                new bootstrap.Modal(document.getElementById('checkoutConfirmationModal')).show();
            });
            
            // Handle the actual checkout process when confirmation button is clicked
            $('#confirmCheckoutBtn').click(function() {
                // Close the confirmation modal
                $('#checkoutConfirmationModal').modal('hide');
                
                // Show the checkout overlay and block navigation
                enableNavigationBlock();
                
                // Create orders from cart
                checkoutCart();
            });
            
            $('#confirm-action').click(function() {
                if (currentAction === 'remove') {
                    removeFromCart(currentItemId);
                } else if (currentAction === 'clear') {
                    clearCart();
                }
                
                $('#confirmationModal').modal('hide');
            });
            
            $('#update-quantity').click(function() {
                const cartItemId = $('#update-cart-item-id').val();
                const quantity = $('#quantity').val();
                
                if (quantity < 1) {
                    showNotification('Quantity must be at least 1', 'warning');
                    return;
                }
                
                updateCartItem(cartItemId, quantity);
                $('#quantityModal').modal('hide');
            });
        });
        
        function loadCart() {
            $('#cart-loading').removeClass('d-none');
            $('#cart-content').addClass('d-none');
            $('#cart-empty').addClass('d-none');
            
            fetch('/api/cart/items')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error fetching cart');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        cartItems = data.items;
                        
                        if (cartItems.length === 0) {
                            $('#cart-empty').removeClass('d-none');
                        } else {
                            renderCart(cartItems, data.cartTotal);
                            $('#cart-content').removeClass('d-none');
                        }
                    } else {
                        showNotification(data.message || 'Error loading cart', 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error loading cart', 'danger');
                })
                .finally(() => {
                    $('#cart-loading').addClass('d-none');
                });
        }
        
        function renderCart(items, total) {
            const tbody = $('#cart-items');
            tbody.empty();
            
            items.forEach(item => {
                const row = $('<tr>');
                row.append(`
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="${item.productImageUrl}" alt="${item.productName}" class="me-2" style="width: 50px; height: 50px; object-fit: cover;">
                            <span>${item.productName}</span>
                        </div>
                    </td>
                    <td>$${item.price.toFixed(2)}</td>
                    <td>${item.quantity}</td>
                    <td>$${(item.price * item.quantity).toFixed(2)}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary me-1 update-quantity" data-id="${item.id}" data-name="${item.productName}" data-quantity="${item.quantity}">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger remove-item" data-id="${item.id}">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                `);
                tbody.append(row);
            });
            
            // Update total
            $('#cart-total').text('$' + total.toFixed(2));
            
            // Add event handlers for newly created buttons
            $('.update-quantity').click(function() {
                const id = $(this).data('id');
                const name = $(this).data('name');
                const quantity = $(this).data('quantity');
                
                $('#update-cart-item-id').val(id);
                $('#product-name').val(name);
                $('#quantity').val(quantity);
                
                new bootstrap.Modal(document.getElementById('quantityModal')).show();
            });
            
            $('.remove-item').click(function() {
                const id = $(this).data('id');
                currentAction = 'remove';
                currentItemId = id;
                
                $('#confirmation-message').text('Are you sure you want to remove this item from your cart?');
                new bootstrap.Modal(document.getElementById('confirmationModal')).show();
            });
        }
        
        function updateCartItem(cartItemId, quantity) {
            // Get the CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
            
            fetch('/api/cart/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    cartItemId: parseInt(cartItemId),
                    quantity: parseInt(quantity)
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error updating cart');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showNotification(data.message || 'Cart updated successfully', 'success');
                    loadCart();
                } else {
                    showNotification(data.message || 'Error updating cart', 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Error updating cart', 'danger');
            });
        }
        
        function removeFromCart(cartItemId) {
            // Get the CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
            
            fetch('/api/cart/remove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    cartItemId: parseInt(cartItemId)
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error removing item from cart');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showNotification(data.message || 'Item removed from cart', 'success');
                    loadCart();
                } else {
                    showNotification(data.message || 'Error removing item from cart', 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Error removing item from cart', 'danger');
            });
        }
        
        function clearCart() {
            // Get the CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
            
            fetch('/api/cart/clear', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error clearing cart');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    showNotification(data.message || 'Cart cleared successfully', 'success');
                    loadCart();
                } else {
                    showNotification(data.message || 'Error clearing cart', 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Error clearing cart', 'danger');
            });
        }
        
        function checkoutCart() {
            // Create an array of orders from cart items
            const orderPromises = cartItems.map(item => {
                // Get the CSRF token
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
                
                return fetch('/api/orders/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({
                        productName: item.productName,
                        productImageUrl: item.productImageUrl,
                        productImageDescription: item.productImageDescription,
                        price: item.price,
                        quantity: item.quantity,
                        notes: 'Ordered from cart'
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error creating order');
                    }
                    return response.json();
                })
                .catch(error => {
                    console.error('Error creating order:', error);
                    // Ensure these are thrown to be caught by the Promise.all
                    throw error;
                });
            });
            
            // Add a timeout to prevent indefinite loading
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error('Checkout timed out')), 20000);
            });
            
            // Wait for all orders to be created or timeout
            Promise.race([
                Promise.all(orderPromises),
                timeoutPromise
            ])
                .then(results => {
                    // Handle only if it's the order results
                    if (Array.isArray(results)) {
                        // Check if all orders were created successfully
                        const allSuccess = results.every(result => result.success);
                        
                        if (allSuccess) {
                            // Store orders created to ensure they go through even if payment fails
                            const firstOrderId = results[0]?.orderId;
                            
                            if (firstOrderId) {
                                // Clear the cart only after successful order creation
                                clearCart();
                                
                                // Create a form and submit to payment controller
                                const form = document.createElement('form');
                                form.method = 'POST';
                                form.action = '/Payment/CreatePayment';
                                
                                const orderIdInput = document.createElement('input');
                                orderIdInput.type = 'hidden';
                                orderIdInput.name = 'orderId';
                                orderIdInput.value = firstOrderId;
                                
                                form.appendChild(orderIdInput);
                                document.body.appendChild(form);
                                
                                // Allow deliberate navigation to payment without warning
                                allowPaymentNavigation();
                                
                                // Submit the form
                                form.submit();
                            } else {
                                // Remove the overlay since we're not going to payment
                                resetCheckoutState();
                                
                                // Clear the cart on successful order
                                clearCart();
                                
                                showNotification('Your order has been placed successfully', 'success');
                                setTimeout(() => {
                                    window.location.href = '/User';
                                }, 2000);
                            }
                        } else {
                            // Remove the overlay on error
                            resetCheckoutState();
                            
                            showNotification('Some orders failed to be created. Please try again.', 'danger');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    
                    // Remove the overlay on error
                    resetCheckoutState();
                    
                    showNotification('Error checking out: ' + error.message, 'danger');
                });
        }
        
        // Helper function to reset the checkout state
        function resetCheckoutState() {
            // Clear session storage
            sessionStorage.removeItem('checkoutInProgress');
            sessionStorage.removeItem('deliberateNavigation');
            sessionStorage.removeItem('interfaceLocked');
            
            // Hide the overlay with multiple approaches to ensure it's hidden
            const overlay = document.getElementById('checkoutOverlay');
            if (overlay) {
                // Use multiple CSS approaches to ensure it's hidden
                overlay.style.display = 'none';
                overlay.style.visibility = 'hidden';
                overlay.style.opacity = '0';
                overlay.style.zIndex = '-1';
                
                // Remove event listeners
                overlay.removeEventListener('click', function(){}, true);
                overlay.removeEventListener('mousedown', function(){}, true);
                overlay.removeEventListener('keydown', function(){}, true);
                
                // Force a DOM reflow to ensure changes take effect
                void overlay.offsetHeight;
                
                // If all else fails, remove the element
                if (overlay.parentNode && overlay.style.display !== 'none') {
                    overlay.parentNode.removeChild(overlay);
                    console.log('Removed checkout overlay from DOM');
                }
            }
            
            // Remove all navigation prevention event listeners
            window.removeEventListener('beforeunload', preventNavigation);
            if (window.preventNavigation) {
                window.removeEventListener('beforeunload', window.preventNavigation);
            }
            
            // Re-enable all interactive elements
            const interactiveElements = document.querySelectorAll('button, a, input, select, textarea, [role="button"]');
            interactiveElements.forEach(element => {
                // Remove disabled attributes
                element.removeAttribute('disabled');
                element.classList.remove('disabled');
                element.removeAttribute('aria-disabled');
                if (element.tabIndex === -1) {
                    element.removeAttribute('tabIndex');
                }
                
                // Restore original click handler if it existed
                if (element._originalOnClick) {
                    element.onclick = element._originalOnClick;
                    delete element._originalOnClick;
                }
                
                // Clone to remove event listeners
                const newElement = element.cloneNode(true);
                if (element.parentNode) {
                    element.parentNode.replaceChild(newElement, element);
                }
            });
            
            // Remove global interaction blockers
            document.body.classList.remove('wait-cursor');
            document.body.style.pointerEvents = '';
            
            console.log('Checkout state reset complete');
        }
        
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            notification.style.top = '20px';
            notification.style.right = '20px';
            notification.style.zIndex = '9999';
            notification.style.maxWidth = '400px';
            
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            // Add to document
            document.body.appendChild(notification);
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 5000);
        }
    </script>
} 